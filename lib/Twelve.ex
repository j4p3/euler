defmodule Twelve do
  @moduledoc """
  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
  The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

  1: 1
  3: 1,3
  6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?
  """

  @doc """
  @optimize: cache factor lists and use them intead of fully factorizing each n
  """
  def run(limit) do
    search_triangles(limit)
  end

  def search_triangles(limit, triangle_tuple \\ {1, 0})

  def search_triangles(limit, {n, prev_sum}) do
    IO.puts("search_triangles(#{limit}, #{n})")
    t_sum = prev_sum + n
    factors = Math.factors(t_sum)

    if length(factors) > limit do
      t_sum
    else
      search_triangles(limit, {n + 1, t_sum})
    end
  end
end
